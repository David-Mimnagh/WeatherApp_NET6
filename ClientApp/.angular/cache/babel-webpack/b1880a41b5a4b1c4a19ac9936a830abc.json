{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/David Mimnagh/Desktop/Interviews/WeatherApp_NET6/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { AuthenticationResultStatus } from '../authorize.service';\nimport { BehaviorSubject } from 'rxjs';\nimport { LoginActions, QueryParameterNames, ApplicationPaths, ReturnUrlType } from '../api-authorization.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../authorize.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\n\nfunction LoginComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵelementStart(1, \"p\");\n    i0.ɵɵtext(2, \"Loading\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"div\");\n    i0.ɵɵelement(4, \"div\");\n    i0.ɵɵelement(5, \"div\");\n    i0.ɵɵelement(6, \"div\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, ctx_r1.message));\n  }\n} // The main responsibility of this component is to handle the user's login process.\n// This is the starting point for the login process. Any component that needs to authenticate\n// a user can simply perform a redirect to this component with a returnUrl query parameter and\n// let the component perform the login and return back to the return url.\n\n\nexport class LoginComponent {\n  constructor(authorizeService, activatedRoute, router) {\n    this.authorizeService = authorizeService;\n    this.activatedRoute = activatedRoute;\n    this.router = router;\n    this.message = new BehaviorSubject(null);\n    this.loggingIn = true;\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const action = _this.activatedRoute.snapshot.url[1];\n\n      switch (action.path) {\n        case LoginActions.Login:\n          yield _this.login(_this.getReturnUrl());\n          break;\n\n        case LoginActions.LoginCallback:\n          yield _this.processLoginCallback();\n          break;\n\n        case LoginActions.LoginFailed:\n          const message = _this.activatedRoute.snapshot.queryParamMap.get(QueryParameterNames.Message);\n\n          _this.message.next(message);\n\n          break;\n\n        case LoginActions.Profile:\n          _this.redirectToProfile();\n\n          break;\n\n        case LoginActions.Register:\n          _this.redirectToRegister();\n\n          break;\n\n        default:\n          throw new Error(`Invalid action '${action}'`);\n      }\n    })();\n  }\n\n  login(returnUrl) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const state = {\n        returnUrl\n      };\n      const result = yield _this2.authorizeService.signIn(state);\n\n      _this2.message.next(undefined);\n\n      switch (result.status) {\n        case AuthenticationResultStatus.Redirect:\n          break;\n\n        case AuthenticationResultStatus.Success:\n          yield _this2.navigateToReturnUrl(returnUrl);\n          break;\n\n        case AuthenticationResultStatus.Fail:\n          yield _this2.router.navigate(ApplicationPaths.LoginFailedPathComponents, {\n            queryParams: {\n              [QueryParameterNames.Message]: result.message\n            }\n          });\n          break;\n\n        default:\n          throw new Error(`Invalid status result ${result.status}.`);\n      }\n\n      _this2.loggingIn = false;\n    })();\n  }\n\n  processLoginCallback() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const url = window.location.href;\n      const result = yield _this3.authorizeService.completeSignIn(url);\n\n      switch (result.status) {\n        case AuthenticationResultStatus.Redirect:\n          // There should not be any redirects as completeSignIn never redirects.\n          throw new Error('Should not redirect.');\n\n        case AuthenticationResultStatus.Success:\n          yield _this3.navigateToReturnUrl(_this3.getReturnUrl(result.state));\n          break;\n\n        case AuthenticationResultStatus.Fail:\n          _this3.message.next(result.message);\n\n          break;\n      }\n    })();\n  }\n\n  redirectToRegister() {\n    this.redirectToApiAuthorizationPath(`${ApplicationPaths.IdentityRegisterPath}?returnUrl=${encodeURI('/' + ApplicationPaths.Login)}`);\n  }\n\n  redirectToProfile() {\n    this.redirectToApiAuthorizationPath(ApplicationPaths.IdentityManagePath);\n  }\n\n  navigateToReturnUrl(returnUrl) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      // It's important that we do a replace here so that we remove the callback uri with the\n      // fragment containing the tokens from the browser history.\n      yield _this4.router.navigateByUrl(returnUrl, {\n        replaceUrl: true\n      });\n    })();\n  }\n\n  getReturnUrl(state) {\n    const fromQuery = this.activatedRoute.snapshot.queryParams.returnUrl; // If the url is coming from the query string, check that is either\n    // a relative url or an absolute url\n\n    if (fromQuery && !(fromQuery.startsWith(`${window.location.origin}/`) || /\\/[^\\/].*/.test(fromQuery))) {\n      // This is an extra check to prevent open redirects.\n      throw new Error('Invalid return url. The return url needs to have the same origin as the current page.');\n    }\n\n    return state && state.returnUrl || fromQuery || ApplicationPaths.DefaultLoginRedirectPath;\n  }\n\n  redirectToApiAuthorizationPath(apiAuthorizationPath) {\n    // It's important that we do a replace here so that when the user hits the back arrow on the\n    // browser they get sent back to where it was on the app instead of to an endpoint on this\n    // component.\n    const redirectUrl = `${window.location.origin}/${apiAuthorizationPath}`;\n    window.location.replace(redirectUrl);\n  }\n\n}\n\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthorizeService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router));\n};\n\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 2,\n  vars: 2,\n  consts: [[\"class\", \"lds-ellipsis\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"lds-ellipsis\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, LoginComponent_div_0_Template, 7, 0, \"div\", 0);\n      i0.ɵɵtemplate(1, LoginComponent_p_1_Template, 3, 3, \"p\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.loggingIn);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.loggingIn);\n    }\n  },\n  directives: [i3.NgIf],\n  pipes: [i3.AsyncPipe],\n  styles: [\".footer[_ngcontent-%COMP%] {\\r\\n  line-height: 30px !important;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ2luLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSw0QkFBNEI7QUFDOUIiLCJmaWxlIjoibG9naW4uY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5mb290ZXIge1xyXG4gIGxpbmUtaGVpZ2h0OiAzMHB4ICFpbXBvcnRhbnQ7XHJcbn1cclxuIl19 */\"]\n});","map":{"version":3,"sources":["C:/Users/David Mimnagh/Desktop/Interviews/WeatherApp_NET6/ClientApp/src/api-authorization/login/login.component.ts"],"names":["AuthenticationResultStatus","BehaviorSubject","LoginActions","QueryParameterNames","ApplicationPaths","ReturnUrlType","i0","i1","i2","i3","LoginComponent_div_0_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","LoginComponent_p_1_Template","ɵɵpipe","ctx_r1","ɵɵnextContext","ɵɵadvance","ɵɵtextInterpolate","ɵɵpipeBind1","message","LoginComponent","constructor","authorizeService","activatedRoute","router","loggingIn","ngOnInit","action","snapshot","url","path","Login","login","getReturnUrl","LoginCallback","processLoginCallback","LoginFailed","queryParamMap","get","Message","next","Profile","redirectToProfile","Register","redirectToRegister","Error","returnUrl","state","result","signIn","undefined","status","Redirect","Success","navigateToReturnUrl","Fail","navigate","LoginFailedPathComponents","queryParams","window","location","href","completeSignIn","redirectToApiAuthorizationPath","IdentityRegisterPath","encodeURI","IdentityManagePath","navigateByUrl","replaceUrl","fromQuery","startsWith","origin","test","DefaultLoginRedirectPath","apiAuthorizationPath","redirectUrl","replace","ɵfac","LoginComponent_Factory","t","ɵɵdirectiveInject","AuthorizeService","ActivatedRoute","Router","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","consts","template","LoginComponent_Template","ɵɵtemplate","ɵɵproperty","directives","NgIf","pipes","AsyncPipe","styles"],"mappings":"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","sourcesContent":["import { AuthenticationResultStatus } from '../authorize.service';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { LoginActions, QueryParameterNames, ApplicationPaths, ReturnUrlType } from '../api-authorization.constants';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"../authorize.service\";\r\nimport * as i2 from \"@angular/router\";\r\nimport * as i3 from \"@angular/common\";\r\nfunction LoginComponent_div_0_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelementStart(0, \"div\", 2);\r\n    i0.ɵɵelementStart(1, \"p\");\r\n    i0.ɵɵtext(2, \"Loading\");\r\n    i0.ɵɵelementEnd();\r\n    i0.ɵɵelement(3, \"div\");\r\n    i0.ɵɵelement(4, \"div\");\r\n    i0.ɵɵelement(5, \"div\");\r\n    i0.ɵɵelement(6, \"div\");\r\n    i0.ɵɵelementEnd();\r\n} }\r\nfunction LoginComponent_p_1_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelementStart(0, \"p\");\r\n    i0.ɵɵtext(1);\r\n    i0.ɵɵpipe(2, \"async\");\r\n    i0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r1 = i0.ɵɵnextContext();\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, ctx_r1.message));\r\n} }\r\n// The main responsibility of this component is to handle the user's login process.\r\n// This is the starting point for the login process. Any component that needs to authenticate\r\n// a user can simply perform a redirect to this component with a returnUrl query parameter and\r\n// let the component perform the login and return back to the return url.\r\nexport class LoginComponent {\r\n    constructor(authorizeService, activatedRoute, router) {\r\n        this.authorizeService = authorizeService;\r\n        this.activatedRoute = activatedRoute;\r\n        this.router = router;\r\n        this.message = new BehaviorSubject(null);\r\n        this.loggingIn = true;\r\n    }\r\n    async ngOnInit() {\r\n        const action = this.activatedRoute.snapshot.url[1];\r\n        switch (action.path) {\r\n            case LoginActions.Login:\r\n                await this.login(this.getReturnUrl());\r\n                break;\r\n            case LoginActions.LoginCallback:\r\n                await this.processLoginCallback();\r\n                break;\r\n            case LoginActions.LoginFailed:\r\n                const message = this.activatedRoute.snapshot.queryParamMap.get(QueryParameterNames.Message);\r\n                this.message.next(message);\r\n                break;\r\n            case LoginActions.Profile:\r\n                this.redirectToProfile();\r\n                break;\r\n            case LoginActions.Register:\r\n                this.redirectToRegister();\r\n                break;\r\n            default:\r\n                throw new Error(`Invalid action '${action}'`);\r\n        }\r\n    }\r\n    async login(returnUrl) {\r\n        const state = { returnUrl };\r\n        const result = await this.authorizeService.signIn(state);\r\n        this.message.next(undefined);\r\n        switch (result.status) {\r\n            case AuthenticationResultStatus.Redirect:\r\n                break;\r\n            case AuthenticationResultStatus.Success:\r\n                await this.navigateToReturnUrl(returnUrl);\r\n                break;\r\n            case AuthenticationResultStatus.Fail:\r\n                await this.router.navigate(ApplicationPaths.LoginFailedPathComponents, {\r\n                    queryParams: { [QueryParameterNames.Message]: result.message }\r\n                });\r\n                break;\r\n            default:\r\n                throw new Error(`Invalid status result ${result.status}.`);\r\n        }\r\n        this.loggingIn = false;\r\n    }\r\n    async processLoginCallback() {\r\n        const url = window.location.href;\r\n        const result = await this.authorizeService.completeSignIn(url);\r\n        switch (result.status) {\r\n            case AuthenticationResultStatus.Redirect:\r\n                // There should not be any redirects as completeSignIn never redirects.\r\n                throw new Error('Should not redirect.');\r\n            case AuthenticationResultStatus.Success:\r\n                await this.navigateToReturnUrl(this.getReturnUrl(result.state));\r\n                break;\r\n            case AuthenticationResultStatus.Fail:\r\n                this.message.next(result.message);\r\n                break;\r\n        }\r\n    }\r\n    redirectToRegister() {\r\n        this.redirectToApiAuthorizationPath(`${ApplicationPaths.IdentityRegisterPath}?returnUrl=${encodeURI('/' + ApplicationPaths.Login)}`);\r\n    }\r\n    redirectToProfile() {\r\n        this.redirectToApiAuthorizationPath(ApplicationPaths.IdentityManagePath);\r\n    }\r\n    async navigateToReturnUrl(returnUrl) {\r\n        // It's important that we do a replace here so that we remove the callback uri with the\r\n        // fragment containing the tokens from the browser history.\r\n        await this.router.navigateByUrl(returnUrl, {\r\n            replaceUrl: true\r\n        });\r\n    }\r\n    getReturnUrl(state) {\r\n        const fromQuery = this.activatedRoute.snapshot.queryParams.returnUrl;\r\n        // If the url is coming from the query string, check that is either\r\n        // a relative url or an absolute url\r\n        if (fromQuery &&\r\n            !(fromQuery.startsWith(`${window.location.origin}/`) ||\r\n                /\\/[^\\/].*/.test(fromQuery))) {\r\n            // This is an extra check to prevent open redirects.\r\n            throw new Error('Invalid return url. The return url needs to have the same origin as the current page.');\r\n        }\r\n        return (state && state.returnUrl) ||\r\n            fromQuery ||\r\n            ApplicationPaths.DefaultLoginRedirectPath;\r\n    }\r\n    redirectToApiAuthorizationPath(apiAuthorizationPath) {\r\n        // It's important that we do a replace here so that when the user hits the back arrow on the\r\n        // browser they get sent back to where it was on the app instead of to an endpoint on this\r\n        // component.\r\n        const redirectUrl = `${window.location.origin}/${apiAuthorizationPath}`;\r\n        window.location.replace(redirectUrl);\r\n    }\r\n}\r\nLoginComponent.ɵfac = function LoginComponent_Factory(t) { return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthorizeService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router)); };\r\nLoginComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: LoginComponent, selectors: [[\"app-login\"]], decls: 2, vars: 2, consts: [[\"class\", \"lds-ellipsis\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"lds-ellipsis\"]], template: function LoginComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵtemplate(0, LoginComponent_div_0_Template, 7, 0, \"div\", 0);\r\n        i0.ɵɵtemplate(1, LoginComponent_p_1_Template, 3, 3, \"p\", 1);\r\n    } if (rf & 2) {\r\n        i0.ɵɵproperty(\"ngIf\", ctx.loggingIn);\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵproperty(\"ngIf\", !ctx.loggingIn);\r\n    } }, directives: [i3.NgIf], pipes: [i3.AsyncPipe], styles: [\".footer[_ngcontent-%COMP%] {\\r\\n  line-height: 30px !important;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ2luLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSw0QkFBNEI7QUFDOUIiLCJmaWxlIjoibG9naW4uY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5mb290ZXIge1xyXG4gIGxpbmUtaGVpZ2h0OiAzMHB4ICFpbXBvcnRhbnQ7XHJcbn1cclxuIl19 */\"] });\r\n"]},"metadata":{},"sourceType":"module"}